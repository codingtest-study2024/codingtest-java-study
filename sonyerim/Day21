// Day21

// 숨어있는 숫자의 덧셈 (2)
class Solution {
    public int solution(String my_string) {
        int answer = 0;
        String[] str = my_string.replaceAll("[a-zA-Z]", " ").split(" ");
        
        for (String s : str) {
            if (!s.equals("")) {
                answer += Integer.parseInt(s);
            }
        }
        
        return answer;
    }
}

// 안전지대
class Solution {
    public int solution(int[][] board) {
        int answer = 0;
        int[][] temp = new int[board.length+2][board.length+2];
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                if (board[i][j] == 1) {
                    temp[i+1][j+1] = 1;
                    temp[i+1][j] = 2;
                    temp[i+1][j+2] = 2;
                    temp[i][j] = 2;
                    temp[i][j+1] = 2;
                    temp[i][j+2] = 2;
                    temp[i+2][j] = 2;
                    temp[i+2][j+1] = 2;
                    temp[i+2][j+2] = 2;
                }
            }
        }
        
        for (int i = 1; i < board.length+1; i++) {
            for (int j = 1; j < board.length+1; j++) {
                if (temp[i][j] == 0) {
                    answer++;
                }
            }
        }
        
        return answer;
    }
}

// 삼각형의 완성조건 (2)
import java.util.*;

class Solution {
    public int solution(int[] sides) {
        int answer = 0;
        
        Arrays.sort(sides);
        
        int min = sides[0];
        int max = sides[1];
        
        for (int i = max-min+1; i <= max; i++) {
            answer++;
        }
        for (int i = max+1; i < max+min; i++) {
            answer++;
        }
        
        return answer;
    }
}

// 외계어 사전
class Solution {
    public int solution(String[] spell, String[] dic) {
        int answer = 2;
        int idx = 0;
        
        for (int i = 0; i < dic.length; i++) {
            idx = 0;
            for (int j = 0; j < spell.length; j++) {
                if (dic[i].contains(spell[j])) {
                    idx++;
                }
                if (idx == spell.length) {
                    answer = 1;
                }
            }
        }
        return answer;
    }
}
