https://held-blue-800.notion.site/1-1-3-b977ab334a5f4be7ade678668d2d31f6?pvs=4
노션 복붙한거라 가독성이 떨어질수 있어서 링크도 첨부합니다
## 기초 코드 작성 요령

**시간복잡도**

- 입력의 크기와 문제를 해결하는데 걸리는 시간의 상관관계

**빅오 표기법**

- 주어진 식을 값이 가장 큰 대표항만 남겨서 나타내는 방법

수행 시간: O(1) < O(logN) < O(N) < O(NlogN) < O(N^2) < O(2^N) < O(N!)

**공간복잡도**

- 입력의 크기와 문제를 해결하는데 필요한 공간의 상관관계
- 512 MB = 1.2억개의 int → int 1개 = 4byte
- char → 1byte = 8bits

**실수 자료형**

- float(4byte) → 유효숫자 6자리
- double(8byte) → 유효숫자 15자리

**실수 자료형의 성질**

- 실수의 저장과 연산 과정에서 반드시 오차가 발생할 수 밖에 없음

→ 유효숫자가 들어가는 fraction field가 유한하기 때문 → 

만약 실수 자료형을 사용한다면? 문제에서 절대/상대 오차를 허용한다는 단서를 줌 ⇒ 일반적으로는 정수로 연산

- double에 long long 범위의 정수를 함부로 담으면 안됨

→ double 유효숫자 15자리, long long는 최대 19자리 → double에 long long 범위의 정수를 담을 경우 오차가 섞인 값이 저장될 수 있음

- 실수를 비교할때는 등호를 사용하면 안됨

**함수 인자**

- int 를 함수 인자로 보냄 → call by value → 값이 복사되어서 넘어감 → 함수에서 값을 바꾸더라도 main의 변수 t에는 아무런 영향 x
- 배열(arr)을 함수 인자로 보냄 → call by referernce → 주소를 넘겨줌 → 함수에서 값이 변경되면 원본의 값도 변경됨
- 구조체를 이용해 값을 보냄 → call by value → 함수에서 값을 바꿔도 원본에는 영향 x

**STL**

- vector → 가변 배열 ⇒ java의 ArrayList와 비슷(가변배열)
- STL을 함수 인자로 넘긴다면 → 복사본을 만들어서 보냄 → 함수를 선언해서 바꾼건 원본에 영향을 주지 x

⇒  STL을 쌩으로 함수 인자에 넣으면 복사해서 보내기 때문에 아래 함수의 시간복잡도는 O(N)

⇒ 참조자를 이용한다면 시간복잡도를 O(1)로 줄일 수 있음

```c
//O(N)
bool cmp1(vector<int> v1, vector<int> v2, int idx) {
	return v1[idx] > v2[idx];
	}
```

```c
bool cmp2(vector<int> &v1, vector<int> &v2, int idx) {
	return v1[idx] > v2[idx];
	}
```
