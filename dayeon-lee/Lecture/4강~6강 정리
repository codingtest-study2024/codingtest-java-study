## 4강

## 배열

- 메모리 상에 원소를 연속하게 배치한 자료구조
- 프로그래밍 에서의 배열 → 배열 선언 후 길이 변경 불가능
- 자료구조 에서의 배열 → 배열 선언 후 길이 변경 가능

배열의 성질

- O(1)에 k 번째 원소를 확인/변경 가능
- 추가적으로 소모되는 메모리의 양(overhead)가 거의 없음
- cache hit rate가 거의 없음→ 메모리상 데이터가 붙어있기 때문
    - cache hit rate : 캐시메모리가 있는 컴퓨터 시스템은 cpu가 메모리에 접근하기 전, 먼저 캐시 메모리에 원하는 데이터가 존재하는지 확인함
    - 이때 필요한 데이터가 있다면 → hit(적중), 없다면 → miss(실패)
    - 요청한 데이터를 캐시메모리에서 찾을 확률 → 적중률
- 메모리 상에 연속한 구간을 잡아야 해서 할당에 제약이 걸림

배열의 연산

- 임의의 위치에 있는 원소를 확인/변경 → O(1)
- 원소를 배열의 끝에 추가/제거 → O(1)
- 임의의 원소를 배열에 추가/제거 → O(N)
    - 임의의 원소를 배열에 추가/제거 한다면 해당 배열의 index 뒤쪽의 원소들을 한칸씩 밀어서 저장해야 하기 때문
- vactor = java ArrayList → 배열의 크기를 유동적으로 관리할 수 있음

insert

해당 배열 index 뒤쪽의 원소들을 한칸씩 밀어서 저장 (이때 Array가 아니라 ArrayList로 생각하기)

```java
public static void insert(int idx, int num, int[] arr, int[] len) {
				// 배열의 길이를 len[0]으로 관리
				// len -> 배열 길이를 담을 배열
        for (int i = len[0]; i > idx; i--) {
            arr[i] = arr[i - 1];
        }
        arr[idx] = num;
        len[0]++;
    }
```

 erace

해당 배열 index 뒤쪽의 원소들을 한칸씩 당겨서 저장 → 맨 뒤 삭제

```java
public static void erase(int idx, int[] arr, int[] len) {
        for (int i = idx; i < len[0] - 1; i++)
            arr[i] = arr[i + 1];
        len[0]--;
    }
```

**BOJ10808 알파벳 갯수**

```java
import java.util.*;
import java.io.*;

public class MainBOJ10808 {
    public static int[] solution(String s) {
        int[] answer = new int['z' - 'a' + 1];
        char k;
        int p = 0;
        for (int i = 0; i < s.length(); i++) {
            k = s.charAt(i);
            p = k - 'a';
            answer[p]++;
        }
        return answer;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String input = br.readLine();
        int[]answer = solution(input);
        
        StringBuilder sb = new StringBuilder();
        for (int count : answer) {
            sb.append(count).append(" ");
        }
        System.out.println(sb.toString().trim()); // 끝에 있는 공백 제거 후 출력
        
    }
}
```

이중 for loop로 문자열 계속 비교 → O(N^2)

알파벳 개수만큼의 배열 생성 후 0으로 초기화 해서 해당하는 알파벳이 있다면 ++ → O(N)
