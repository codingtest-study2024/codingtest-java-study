//직사각형 넓이 구하기
class Solution {
    public int solution(int[][] dots) {
        int width = 0;
        int height = 0;

        for(int i = 0; i < dots.length; i++) {
            for(int j = i + 1; j < dots.length; j++) {
                if(dots[i][0] == dots[j][0]) { 
                    height = Math.abs(dots[i][1] - dots[j][1]);
                } else if(dots[i][1] == dots[j][1]) { 
                    width = Math.abs(dots[i][0] - dots[j][0]);
                }
            }
        }     

        return width * height;
    }
}
//캐릭터의 좌표
class Solution {
    public int[] solution(String[] keyinput, int[] board) {
        int[] answer = {0, 0};

        for(int i = 0; i < keyinput.length; i++) {
            if(keyinput[i].equals("left")) {
                answer[0]--;
                if(answer[0] < -(int)(board[0] / 2))
                    answer[0] = -(int)(board[0] / 2);
            } else if (keyinput[i].equals("right")) {
                answer[0]++;
                if(answer[0] > (int)(board[0] / 2))
                    answer[0] = (int)(board[0] / 2);
            } else if (keyinput[i].equals("up")) {
                answer[1]++;
                if(answer[1] > (int)(board[1] / 2))
                    answer[1] = (int)(board[1] / 2);
            } else {
                answer[1]--;
                if(answer[1] < -(int)(board[1] / 2))
                    answer[1] = -(int)(board[1] / 2);
            } 
        }

        return answer;
    }
}

//최댓값 만들기(2)
class Solution {
    public int solution(int[] numbers) {
         // 초기 최댓값을 설정
        int answer = -100000000;

        for (int i = 0; i < numbers.length; i++) {
            for (int j = i + 1; j < numbers.length; j++) {
                int multi = numbers[i] * numbers[j];                
                // 계산한 곱이 현재까지의 최댓값보다 크면 최댓값을 업데이트
                if (multi > answer) {
                    answer = multi;
                }
            }
        }

        return answer;
    }
}

//다항식 더하기
